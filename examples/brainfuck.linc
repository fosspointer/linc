// Brainfuck interpreter in linc!

#include `std.linc`
tape: mut u8[32768u64]
position: mut u64

fn interpret(input: string) {
    current_char: mut char;
    loop: mut u32 = 0u;

    for i mut := 0u64; i < +input; ++i {
        current_char = input[i];

        match current_char {
            '>' => ++position,
            '<' => --position,
            '+' => ++tape[position],
            '-' => --tape[position],
            '.' => putc(as mut char(tape[position])),
            ',' => tape[position] = as u8 (readc()),
            '[' => {
                if tape[position] == 0u8 {
                    loop = 1u;
                    while loop > 0u {
                        current_char = input[++i];
                        if current_char == '[' {
                            ++loop;
                        } else if current_char == ']' {
                            --loop;
                        };
                    };
                };
            },
            ']' => {
                if tape[position] != 0u8 {
                    loop = 1u;
                    while loop > 0u {
                        current_char = input[--i];
                        if current_char == '[' {
                            --loop;
                        } else if current_char == ']' {
                            ++loop;
                        };
                    };
                };
            }
        };
    };
}

fn readFile(filename: string): string {
    file_descriptor := sys_open(filename, 0i32, 0u16);
    
    if file_descriptor < 0i32 {
        putln("Error: unable to open file. Error code: " + @(-file_descriptor));
        sys_exit(1i32);
    };

    buffer: mut string;
    result: mut string;
    bytes_read: mut i64;

    while true {
        bytes_read = sys_read(file_descriptor, buffer, 1024u64);
        if bytes_read < 0i64 {
            println("Error: Failed to read file. Error code: " + @(-bytes_read));
            sys_close(file_descriptor);
            sys_exit(2i32);
        }
        else if bytes_read == 0i64 {
            break;
        };
        result += buffer;
    };

    sys_close(file_descriptor);
    result
}

fn main(args: string[]): i32 {
    if +args == 3u64 {
        filename: string = args[2u64];
        str := readFile(filename);
        interpret(str);
        return 0i32;
    }
    else if +args >= 3u64 {
        println("Usage:");
        println(args[1u64] + ": interpret code from stdin.");
        println(args[1u64] + "[FILE]: interpret code from a file.");
        return -1i32;
    };

    println("<Brainfuck interpreter in linc. Input a new-line character to start code evaluation.>");

    str mut := "";
    line mut := readln("");
    while line != "" {
        str += line;
        line = readln("");
    };

    interpret(str);
    0i32
}