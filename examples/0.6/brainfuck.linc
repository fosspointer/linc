// Brainfuck interpreter in linc!

#include `std.linc`
tape: mut u8[32768u64]
position: mut u64

fn interpret(input: string): void {
    current_char: mut char
    loop: mut u32 = 0u

    for(i: mut u64 = 0u64 i < +input ++i) {
        current_char = input[i]

        if current_char == '>'
            ++position
        else if current_char == '<'
            --position
        else if current_char == '+'
            ++tape[position]
        else if current_char == '-'
            --tape[position]
        else if current_char == '.'
            putc(as mut char(tape[position]))
        else if current_char == ',' {
            tape[position] = as u8 (readchar())
        }
        else if current_char == '[' {
            if(tape[position] == 0u8) {
                loop = 1u
                while(loop > 0u) {
                    current_char = input[++i]
                    if current_char == '['
                        ++loop
                    else if current_char == ']'
                        --loop
                }
            }
        }
        else if current_char == ']' {
            if(tape[position] != 0u8) {
                loop = 1u
                while(loop > 0u) {
                    current_char = input[--i]
                    if current_char == '['
                        --loop
                    else if current_char == ']'
                        ++loop
                }
            }
        }
    }
}
 
fn main(args: string[]): i32 {
    if(+args == 3u64) {
        filename: string = args[2u64]
        str: string = system("cat '" + filename + '\'')

        interpret(str)
        return 0
    }
    else if(+args >= 3u64) {
        println("Usage:")
        println(args[1u64] + ": interpret code from stdin.")
        println(args[1u64] + "[FILE]: interpret code from a file.")
        return -1
    }

    println("<Brainfuck interpreter in linc. Input a new-line character to start code evaluation.>")

    str: mut string = ""
    line: mut string = readln("")
    while(line != "")
    {
        str += line
        line = readln("")
    }

    interpret(str)
    return 0
}