#guard
gen<T> enum Option {
    Some(T), None
}

gen<T> fn Option_or(option: Option<T> , fallback: T) {
    match option {
        Option<T> ::Some(value) => value,
        Option<T> ::None => fallback
    }
}

gen<T, U> fn Option_map(option: Option<T> , function: fn(T): U) {
    match option {
        Option<T> ::Some(value) => Option<U> ::Some(function(value)),
        Option<T> ::None => Option<U> ::None
    }
}